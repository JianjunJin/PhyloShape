#!/usr/bin/env python

"""Simulate an artifical beak dataset.

Two phenotypes are simulated from randomly drawn parameters and their
common ancestor is modeled as having an exactly intermediate phenotype,
defined as being generated by the parameter set that is the average of
the two descendant taxa parameter sets. Divergence from the common
ancestor is modeled to increase linear with time in this example
(though not Brownian) and so intermediate ancestral samples along each
branch can be sampled using np.linspace(ancestor, descendant, 2 +
number of internal samples).
"""

import itertools
import pandas as pd
import numpy as np
from phyloshape.simulate.landmarks import get_beak_landmarks

LABELS = ["length", "rotation", "curve_x", "curve_y", "beak_radius_start"]


def simulate_pairs():

    # all parameters of interest
    params = list(itertools.product(
        np.linspace(0.5, 7, 3),                 # length @ 3 points
        np.linspace(-2 * np.pi, 2 * np.pi, 5),  # rotation @ 5 points
        np.linspace(-1, 1, 3),                  # curve_x @ 3 points
        np.linspace(-1, 1, 3),                  # curve_y @ 3 points
        np.linspace(0.5, 2.5, 3),               # beak_radius_start @ 3 points
    ))

    # mid point for each param: some length and radius exist for the
    # beak, but rotations are default to zero.
    param_standard = [3.75, 0, 0, 0, 1.5]

    # get all ways of sampling 2 diff param settings
    param_pairs = itertools.product([param_standard], params)

    # store params
    params = []
    full = pd.DataFrame()
    for dataset, pair in enumerate(param_pairs):

        average = (np.array(pair[0]) + np.array(pair[1])) / 2
        data = pd.DataFrame(
            index=["A", "B", "M"],
            columns=LABELS,
            data=[pair[0], pair[1], average],
        )
        data["dataset"] = dataset
        params.append(data)
    return params


    # for row in data.index:
    #     arr = get_beak_landmarks(
    #         num_intervals=40,
    #         num_disc_points=15,
    #         **{i: data.loc[row, i] for i in LABELS},
    #     )
    #     # data['x'] = arr[:, 0]
    #     # print(arr.shape)
    #     landmarks = arr.reshape((-1, 3))
    #     # print(landmarks.shape)

    #     df = pd.DataFrame({
    #         'dataset': dataset,
    #         'sample_idx': row,
    #         'landmark': range(landmarks.shape[0]),
    #         'x': landmarks[:, 0],
    #         'y': landmarks[:, 1],
    #         'z': landmarks[:, 2],
    #     })
    #     full = pd.concat([full, df])


NAME = "beak_data4"



# # write simulation parameters
# arr = pd.concat(params).reset_index(names="sample_idx")
# arr = arr[["dataset", "sample_idx"] + LABELS]
# arr.to_csv(f"./{NAME}_params.csv")
# print(arr)

# print(full.shape)
# print(full.reset_index(drop=True))
# full.to_csv(f"./{NAME}_landmarks.csv")


if __name__ == "__main__":
    simulate_pairs()
